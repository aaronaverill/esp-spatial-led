const fs = require('fs')
const CleanCSS = require('clean-css')

const assetsFolder = 'assets'
const contentFolder = 'src/Web/UI/Content'

console.info('Bundling web assets...')

if (!fs.existsSync(contentFolder)){
  fs.mkdirSync(contentFolder);
}

bundleHtml(`${assetsFolder}/html/index.html`, `${contentFolder}/index_html.h`, 'index_html')
bundleCss(`${assetsFolder}/css/app.css`, `${contentFolder}/app_css.h`, 'app_css')
bundleJs(`${assetsFolder}/js/app.js`, `${contentFolder}/app_js.h`, 'app_js')

function bundleHtml(source, destination, variableName) {
  console.info(`Processing file ${source}`)
  let content = fs.readFileSync(source)
  bundleRawString(source, content, destination, variableName)
}

function bundleCss(source, destination, variableName) {
  console.info(`Processing file ${source}`)
  let content = fs.readFileSync(source)

  console.info(' - Minifying CSS')
  const minifyOptions = {
    /* options */ 
  }
  const output = new CleanCSS(minifyOptions).minify(content)
  //console.info(output)
  if (output.errors.length) {
    console.info(' - Errors:')
    for(let i = 0; i < output.errors.length; i++) {
      console.info('    ' + output.errors[i])
    }
    process.exitCode = 1
    process.exit()
  }
  console.info(` - Resized from ${output.stats.originalSize.toLocaleString()} to ${output.stats.minifiedSize.toLocaleString()} bytes`)
  if (output.warnings.length) {
    console.info(' - Warnings:')
    for(let i = 0; i < output.warnings.length; i++) {
      console.info('    ' + output.warnings[i])
    }
  }

  bundleRawString(source, output.styles, destination, variableName)
}

function bundleJs(source, destination, variableName) {
  console.info(`Processing ${source}`)
  let content = fs.readFileSync(source)
  bundleRawString(source, content, destination, variableName)
}

function bundleRawString(source, value, destination, variableName) {
  content = `
// File autogenerated from ${source} by build/webbundle.js. 
// Do not edit.

#include <Arduino.h>

const char ${variableName}[] PROGMEM = R"rawstring(
${value}
)rawstring";
`
  writeFile(content, destination)
}

function writeFile(content, destination) {
  console.info(` - Writing ${destination}`)
  fs.writeFileSync(destination, content)
}